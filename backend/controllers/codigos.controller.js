// controllers/codigos.controller.js - VERSI√ìN CON MODALIDAD DE CONVENIO
const Codigo = require('../models/codigo.model');

// ‚ú® ACTUALIZADO: Obtener todos los c√≥digos con filtros opcionales (incluye modalidad)
exports.getCodigos = async (req, res) => {
  try {
    const { 
      tipo, 
      estado, 
      fecha_vigencia, 
      search, 
      incluir_inactivos, 
      modalidad_convenio // ‚ú® NUEVO FILTRO
    } = req.query;
    
    const options = { where: {} };
    
    // Aplicar filtros si se proporcionan
    if (tipo) {
      options.where.tipo = tipo;
    }
    
    if (estado) {
      options.where.estado = estado;
    } else if (incluir_inactivos !== 'true') {
      // Por defecto, mostrar solo activos
      options.where.estado = 'activo';
    }
    
    // ‚ú® NUEVO: Filtrar por modalidad de convenio
    if (modalidad_convenio) {
      options.where.modalidad_convenio = modalidad_convenio;
    }
    
    if (fecha_vigencia) {
      options.where.fecha_vigencia = fecha_vigencia;
    }
    
    if (search) {
      options.where.search = search;
    }
    
    const codigos = await Codigo.findAll(options);
    
    console.log(`‚úÖ Se encontraron ${codigos.length} c√≥digos con filtros:`, {
      tipo,
      estado,
      modalidad_convenio,
      incluir_inactivos
    });
    
    res.status(200).json({
      success: true,
      count: codigos.length,
      data: codigos
    });
  } catch (error) {
    console.error('Error al obtener c√≥digos de facturaci√≥n:', error);
    res.status(500).json({
      success: false,
      message: 'Error al obtener c√≥digos de facturaci√≥n',
      error: error.message
    });
  }
};

// Obtener un c√≥digo por ID
exports.getCodigoById = async (req, res) => {
  try {
    const codigo = await Codigo.findByPk(req.params.id);
    
    if (!codigo) {
      return res.status(404).json({
        success: false,
        message: 'C√≥digo no encontrado'
      });
    }
    
    res.status(200).json({
      success: true,
      data: codigo
    });
  } catch (error) {
    console.error('Error al obtener c√≥digo:', error);
    res.status(500).json({
      success: false,
      message: 'Error al obtener c√≥digo',
      error: error.message
    });
  }
};

// ‚ú® ACTUALIZADO: Crear un nuevo c√≥digo (incluye modalidad)
exports.createCodigo = async (req, res) => {
  try {
    console.log('üöÄ CREAR C√ìDIGO - Body completo recibido:', req.body);
    
    const { 
      codigo, descripcion, notas, tipo, dias_aplicables, 
      hora_inicio, hora_fin, factor_multiplicador,
      fecha_vigencia_desde, fecha_vigencia_hasta, estado,
      modalidad_convenio = 'FC' // ‚ú® NUEVO CAMPO CON DEFAULT
    } = req.body;
    
    console.log('üöÄ CREAR C√ìDIGO - Campos extra√≠dos:', {
      codigo,
      descripcion,
      notas: notas,
      tipo,
      dias_aplicables,
      hora_inicio,
      hora_fin,
      factor_multiplicador,
      fecha_vigencia_desde,
      fecha_vigencia_hasta,
      estado,
      modalidad_convenio // ‚ú® NUEVO
    });
    
    // Validaciones
    if (!codigo || !descripcion || !tipo || !fecha_vigencia_desde) {
      return res.status(400).json({
        success: false,
        message: 'Faltan campos obligatorios'
      });
    }
    
    // ‚ú® ACTUALIZADO: Verificar si ya existe un c√≥digo con el mismo c√≥digo Y modalidad
    const codigosExistentes = await Codigo.findAll({
      where: {
        codigo,
        modalidad_convenio
      }
    });
    
    if (codigosExistentes.length > 0) {
      return res.status(409).json({
        success: false,
        message: `El c√≥digo "${codigo}" ya existe para la modalidad ${modalidad_convenio}.`
      });
    }
    
    // Crear el c√≥digo
    const nuevoCodigo = await Codigo.create({
      codigo,
      descripcion,
      notas,
      tipo,
      dias_aplicables,
      hora_inicio,
      hora_fin,
      factor_multiplicador,
      fecha_vigencia_desde,
      fecha_vigencia_hasta,
      estado,
      modalidad_convenio // ‚ú® INCLUIR MODALIDAD
    });
    
    console.log('‚úÖ C√ìDIGO CREADO EXITOSAMENTE:', {
      id: nuevoCodigo.id,
      codigo: nuevoCodigo.codigo,
      modalidad_convenio: nuevoCodigo.modalidad_convenio
    });
    
    res.status(201).json({
      success: true,
      message: 'C√≥digo creado correctamente',
      data: nuevoCodigo
    });
  } catch (error) {
    console.error('‚ùå Error al crear c√≥digo:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'Error al crear c√≥digo',
      error: error.message
    });
  }
};

// ‚ú® ACTUALIZADO: Actualizar un c√≥digo existente (incluye modalidad)
exports.updateCodigo = async (req, res) => {
  try {
    console.log('üîÑ ACTUALIZAR C√ìDIGO - Body completo recibido:', req.body);
    console.log('üîÑ ACTUALIZAR C√ìDIGO - ID:', req.params.id);
    
    const { 
      codigo, descripcion, notas, tipo, dias_aplicables, 
      hora_inicio, hora_fin, factor_multiplicador,
      fecha_vigencia_desde, fecha_vigencia_hasta, estado,
      modalidad_convenio // ‚ú® NUEVO CAMPO
    } = req.body;
    
    console.log('üîÑ ACTUALIZAR C√ìDIGO - Campos extra√≠dos:', {
      codigo,
      descripcion,
      notas: notas,
      tipo,
      dias_aplicables,
      hora_inicio,
      hora_fin,
      factor_multiplicador,
      fecha_vigencia_desde,
      fecha_vigencia_hasta,
      estado,
      modalidad_convenio // ‚ú® NUEVO
    });
    
    // Verificar que el c√≥digo existe
    const codigoObj = await Codigo.findByPk(req.params.id);
    if (!codigoObj) {
      return res.status(404).json({
        success: false,
        message: 'C√≥digo no encontrado'
      });
    }
    
    // ‚ú® ACTUALIZADO: Si se va a cambiar el c√≥digo o modalidad, verificar que no haya conflictos
    if ((codigo && codigo !== codigoObj.codigo) || 
        (modalidad_convenio && modalidad_convenio !== codigoObj.modalidad_convenio)) {
      
      const nuevoCodigo = codigo || codigoObj.codigo;
      const nuevaModalidad = modalidad_convenio || codigoObj.modalidad_convenio;
      
      const codConflicto = await Codigo.findAll({
        where: {
          codigo: nuevoCodigo,
          modalidad_convenio: nuevaModalidad
        }
      });
      
      if (codConflicto.some(c => c.id !== parseInt(req.params.id))) {
        return res.status(409).json({
          success: false,
          message: `El c√≥digo "${nuevoCodigo}" ya existe para la modalidad ${nuevaModalidad}.`
        });
      }
    }
    
    // Actualizar el c√≥digo
    const codigoActualizado = await codigoObj.update({
      codigo,
      descripcion,
      notas,
      tipo,
      dias_aplicables,
      hora_inicio,
      hora_fin,
      factor_multiplicador,
      fecha_vigencia_desde,
      fecha_vigencia_hasta,
      estado,
      modalidad_convenio // ‚ú® INCLUIR MODALIDAD
    });
    
    console.log('‚úÖ C√ìDIGO ACTUALIZADO EXITOSAMENTE:', {
      id: codigoActualizado.id,
      codigo: codigoActualizado.codigo,
      modalidad_convenio: codigoActualizado.modalidad_convenio
    });
    
    res.status(200).json({
      success: true,
      message: 'C√≥digo actualizado correctamente',
      data: codigoActualizado
    });
  } catch (error) {
    console.error('‚ùå Error al actualizar c√≥digo:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'Error al actualizar c√≥digo',
      error: error.message
    });
  }
};

// Desactivar un c√≥digo
exports.deactivateCodigo = async (req, res) => {
  try {
    const codigo = await Codigo.findByPk(req.params.id);
    
    if (!codigo) {
      return res.status(404).json({
        success: false,
        message: 'C√≥digo no encontrado'
      });
    }
    
    await codigo.deactivate();
    
    res.status(200).json({
      success: true,
      message: 'C√≥digo desactivado correctamente'
    });
  } catch (error) {
    console.error('Error al desactivar c√≥digo:', error);
    res.status(500).json({
      success: false,
      message: 'Error al desactivar c√≥digo',
      error: error.message
    });
  }
};

// Eliminar un c√≥digo (solo si no est√° en uso)
exports.deleteCodigo = async (req, res) => {
  try {
    const codigo = await Codigo.findByPk(req.params.id);
    
    if (!codigo) {
      return res.status(404).json({
        success: false,
        message: 'C√≥digo no encontrado'
      });
    }
    
    try {
      await codigo.destroy();
      
      res.status(200).json({
        success: true,
        message: 'C√≥digo eliminado correctamente'
      });
    } catch (error) {
      if (error.message.includes('est√° siendo utilizado')) {
        return res.status(400).json({
          success: false,
          message: error.message
        });
      }
      throw error;
    }
  } catch (error) {
    console.error('Error al eliminar c√≥digo:', error);
    res.status(500).json({
      success: false,
      message: 'Error al eliminar c√≥digo',
      error: error.message
    });
  }
};

// ‚ú® ACTUALIZADO: Obtener c√≥digos aplicables a un rango de fecha y hora (incluye modalidad)
exports.getCodigosAplicables = async (req, res) => {
  try {
    const { 
      fecha, 
      hora_inicio, 
      hora_fin, 
      modalidad_convenio = 'FC' // ‚ú® NUEVO PAR√ÅMETRO CON DEFAULT
    } = req.query;
    
    console.log('üîç C√ìDIGOS APLICABLES - Par√°metros recibidos:', {
      fecha,
      hora_inicio,
      hora_fin,
      modalidad_convenio
    });
    
    if (!fecha || !hora_inicio || !hora_fin) {
      return res.status(400).json({
        success: false,
        message: 'Se requieren los par√°metros: fecha, hora_inicio, hora_fin'
      });
    }
    
    // ‚ú® USAR FUNCI√ìN ACTUALIZADA CON MODALIDAD
    const codigosAplicables = await Codigo.findApplicable(
      fecha,
      hora_inicio,
      hora_fin,
      modalidad_convenio // ‚ú® PASAR MODALIDAD
    );
    
    console.log(`‚úÖ C√ìDIGOS APLICABLES ENCONTRADOS: ${codigosAplicables.length} para modalidad ${modalidad_convenio}`);
    
    res.status(200).json({
      success: true,
      count: codigosAplicables.length,
      data: codigosAplicables,
      modalidad_convenio: modalidad_convenio // ‚ú® INCLUIR EN RESPUESTA
    });
  } catch (error) {
    console.error('Error al obtener c√≥digos aplicables:', error);
    res.status(500).json({
      success: false,
      message: 'Error al obtener c√≥digos aplicables',
      error: error.message
    });
  }
};

module.exports = exports;